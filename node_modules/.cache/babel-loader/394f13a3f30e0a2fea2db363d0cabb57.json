{"ast":null,"code":"import AllLocations from \"./locationdata\";\nimport Location from \"./Location\";\nexport default class Map {\n  constructor() {\n    // init empty array\n    this.locationArray = [];\n    this.currentLocation = \"\";\n\n    for (var key in AllLocations) {\n      if (AllLocations.hasOwnProperty(key)) {\n        // construct location object\n        let newLocation = new Location(AllLocations[key]); // bind Entrance to newLocation\n\n        if (newLocation.name === \"Entrance\") {\n          this.currentLocation = newLocation;\n        }\n\n        this.locationArray.push(newLocation);\n      }\n    }\n  }\n\n  getCurrentLocation() {\n    console.log(\"The current location is \" + this.currentLocation.name);\n    return this.currentLocation;\n  }\n\n  getAllLocations() {\n    return this.locationArray;\n  }\n\n  move(direction) {\n    // find if there is neighbour\n    try {\n      let newLocationName = this.currentLocation.getNeighbourName(direction); // find the neighbour and set the current location to this location\n\n      this.currentLocation = this.locationArray.find(function (element) {\n        return element.name === newLocationName;\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/bobby/Repositories/vtour/VTour-1/src/blogic/Map.js"],"names":["AllLocations","Location","Map","constructor","locationArray","currentLocation","key","hasOwnProperty","newLocation","name","push","getCurrentLocation","console","log","getAllLocations","move","direction","newLocationName","getNeighbourName","find","element","err"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,gBAAzB;AACA,OAAOC,QAAP,MAAqB,YAArB;AAEA,eAAe,MAAMC,GAAN,CAAU;AACrBC,EAAAA,WAAW,GAAE;AACT;AACA,SAAKC,aAAL,GAAqB,EAArB;AACA,SAAKC,eAAL,GAAuB,EAAvB;;AACA,SAAK,IAAIC,GAAT,IAAgBN,YAAhB,EAA6B;AAEzB,UAAIA,YAAY,CAACO,cAAb,CAA4BD,GAA5B,CAAJ,EAAqC;AAEjC;AACA,YAAIE,WAAW,GAAG,IAAIP,QAAJ,CAAaD,YAAY,CAACM,GAAD,CAAzB,CAAlB,CAHiC,CAKjC;;AACA,YAAIE,WAAW,CAACC,IAAZ,KAAqB,UAAzB,EAAoC;AAChC,eAAKJ,eAAL,GAAuBG,WAAvB;AACH;;AAED,aAAKJ,aAAL,CAAmBM,IAAnB,CAAwBF,WAAxB;AACH;AACJ;AACJ;;AAEDG,EAAAA,kBAAkB,GAAE;AAChBC,IAAAA,OAAO,CAACC,GAAR,CAAY,6BAA6B,KAAKR,eAAL,CAAqBI,IAA9D;AACA,WAAO,KAAKJ,eAAZ;AACH;;AAEDS,EAAAA,eAAe,GAAE;AACb,WAAO,KAAKV,aAAZ;AACH;;AAEDW,EAAAA,IAAI,CAACC,SAAD,EAAW;AACX;AACA,QAAI;AACA,UAAIC,eAAe,GAAG,KAAKZ,eAAL,CAAqBa,gBAArB,CAAsCF,SAAtC,CAAtB,CADA,CAGA;;AACA,WAAKX,eAAL,GAAuB,KAAKD,aAAL,CAAmBe,IAAnB,CACnB,UAASC,OAAT,EAAiB;AACb,eAAOA,OAAO,CAACX,IAAR,KAAiBQ,eAAxB;AACH,OAHkB,CAAvB;AAKH,KATD,CAUA,OAAOI,GAAP,EAAY;AACRT,MAAAA,OAAO,CAACC,GAAR,CAAYQ,GAAZ;AACH;AACJ;;AA9CoB","sourcesContent":["import AllLocations from \"./locationdata\"\nimport Location from \"./Location\"\n\nexport default class Map {\n    constructor(){\n        // init empty array\n        this.locationArray = [];\n        this.currentLocation = \"\";\n        for( var key in AllLocations){\n\n            if (AllLocations.hasOwnProperty(key)){\n\n                // construct location object\n                let newLocation = new Location(AllLocations[key])\n\n                // bind Entrance to newLocation\n                if (newLocation.name === \"Entrance\"){\n                    this.currentLocation = newLocation;\n                }\n\n                this.locationArray.push(newLocation);\n            }\n        }\n    }\n\n    getCurrentLocation(){\n        console.log(\"The current location is \" + this.currentLocation.name)\n        return this.currentLocation;\n    }\n\n    getAllLocations(){\n        return this.locationArray\n    }\n\n    move(direction){\n        // find if there is neighbour\n        try {\n            let newLocationName = this.currentLocation.getNeighbourName(direction);\n\n            // find the neighbour and set the current location to this location\n            this.currentLocation = this.locationArray.find(\n                function(element){\n                    return element.name === newLocationName;\n                }\n            );\n        }\n        catch (err) {\n            console.log(err)\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}