{"ast":null,"code":"class Location {\n  /**\n   * \n   * @param {*} name \n   * @param {*} upNeighbour \n   * @param {*} downNeighbour \n   * @param {*} leftNeighbour \n   * @param {*} rightNeighbour \n   * @param {*} juice \n   * @param {*} photo \n   * @param {*} video \n   */\n  constructor(name, upNeighbour, downNeighbour, leftNeighbour, rightNeighbour, juice, photo, video) {\n    this.name = name; // A location is aware of its four neighbours (for now)\n\n    this.upNeighbour = upNeighbour;\n    this.downNeighbour = downNeighbour;\n    this.leftNeighbour = leftNeighbour;\n    this.rightNeighbour = rightNeighbour; // Special attributes to the location\n\n    this.juice = juice;\n    this.photo = juice;\n    this.video = juice;\n  }\n  /**\n   * Returns boolean if a neighbour exists after executing a move\n   * @param {*} direction \n   */\n\n\n  canMove(direction) {\n    switch (direction) {\n      case up:\n        return this.upNeighbour !== undefined;\n      //potential bug:!= vs !==, undefined vs null\n\n      case down:\n        return this.downNeighbour !== undefined;\n\n      case left:\n        return this.leftNeighbour !== undefined;\n\n      case right:\n        return this.rightNeighbour !== undefined;\n\n      default:\n        return \"error, invalid direction\";\n    }\n  }\n  /**\n   * Returns boolean if a neighbour exists after executing a move\n   * @param {*} direction \n   */\n\n\n  move(direction) {\n    switch (direction) {\n      case up:\n        return this.upNeighbour;\n\n      case down:\n        return this.downNeighbour;\n\n      case left:\n        return this.leftNeighbour;\n\n      case right:\n        return this.rightNeighbour;\n\n      default:\n        return \"error, invalid direction\";\n    }\n  }\n\n}\n\nexport default Location;","map":{"version":3,"sources":["/Users/bobby/Repositories/vtour/VTour-1/src/blogic/Location.js"],"names":["Location","constructor","name","upNeighbour","downNeighbour","leftNeighbour","rightNeighbour","juice","photo","video","canMove","direction","up","undefined","down","left","right","move"],"mappings":"AAAA,MAAMA,QAAN,CAAe;AACX;;;;;;;;;;;AAWAC,EAAAA,WAAW,CAACC,IAAD,EAAMC,WAAN,EAAkBC,aAAlB,EAAgCC,aAAhC,EAA8CC,cAA9C,EACPC,KADO,EACDC,KADC,EACKC,KADL,EACW;AAClB,SAAKP,IAAL,GAAYA,IAAZ,CADkB,CAGlB;;AACA,SAAKC,WAAL,GAAmBA,WAAnB;AACA,SAAKC,aAAL,GAAqBA,aAArB;AACA,SAAKC,aAAL,GAAqBA,aAArB;AACA,SAAKC,cAAL,GAAsBA,cAAtB,CAPkB,CASlB;;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA,SAAKC,KAAL,GAAaD,KAAb;AACA,SAAKE,KAAL,GAAaF,KAAb;AACH;AAED;;;;;;AAIAG,EAAAA,OAAO,CAAEC,SAAF,EAAa;AAChB,YAAOA,SAAP;AACI,WAAKC,EAAL;AACI,eAAO,KAAKT,WAAL,KAAqBU,SAA5B;AAAuC;;AAC3C,WAAKC,IAAL;AACI,eAAO,KAAKV,aAAL,KAAuBS,SAA9B;;AACJ,WAAKE,IAAL;AACI,eAAO,KAAKV,aAAL,KAAuBQ,SAA9B;;AACJ,WAAKG,KAAL;AACI,eAAO,KAAKV,cAAL,KAAwBO,SAA/B;;AACJ;AACI,eAAO,0BAAP;AAVR;AAYH;AAED;;;;;;AAIAI,EAAAA,IAAI,CAAEN,SAAF,EAAa;AACb,YAAOA,SAAP;AACI,WAAKC,EAAL;AACI,eAAO,KAAKT,WAAZ;;AACJ,WAAKW,IAAL;AACI,eAAO,KAAKV,aAAZ;;AACJ,WAAKW,IAAL;AACI,eAAO,KAAKV,aAAZ;;AACJ,WAAKW,KAAL;AACI,eAAO,KAAKV,cAAZ;;AACJ;AACI,eAAO,0BAAP;AAVR;AAYH;;AAhEU;;AAmEf,eAAeN,QAAf","sourcesContent":["class Location {\n    /**\n     * \n     * @param {*} name \n     * @param {*} upNeighbour \n     * @param {*} downNeighbour \n     * @param {*} leftNeighbour \n     * @param {*} rightNeighbour \n     * @param {*} juice \n     * @param {*} photo \n     * @param {*} video \n     */\n    constructor(name,upNeighbour,downNeighbour,leftNeighbour,rightNeighbour,\n        juice,photo,video){\n        this.name = name;\n\n        // A location is aware of its four neighbours (for now)\n        this.upNeighbour = upNeighbour;\n        this.downNeighbour = downNeighbour;\n        this.leftNeighbour = leftNeighbour;\n        this.rightNeighbour = rightNeighbour;\n\n        // Special attributes to the location\n        this.juice = juice;\n        this.photo = juice;\n        this.video = juice;\n    }\n\n    /**\n     * Returns boolean if a neighbour exists after executing a move\n     * @param {*} direction \n     */\n    canMove (direction) {\n        switch(direction){\n            case up:\n                return this.upNeighbour !== undefined; //potential bug:!= vs !==, undefined vs null\n            case down:\n                return this.downNeighbour !== undefined;\n            case left:\n                return this.leftNeighbour !== undefined;\n            case right:\n                return this.rightNeighbour !== undefined;\n            default:\n                return \"error, invalid direction\";    \n        }\n    }\n\n    /**\n     * Returns boolean if a neighbour exists after executing a move\n     * @param {*} direction \n     */\n    move (direction) {\n        switch(direction){\n            case up:\n                return this.upNeighbour \n            case down:\n                return this.downNeighbour\n            case left:\n                return this.leftNeighbour \n            case right:\n                return this.rightNeighbour \n            default:\n                return \"error, invalid direction\";    \n        }\n    }\n}\n\nexport default Location;"]},"metadata":{},"sourceType":"module"}