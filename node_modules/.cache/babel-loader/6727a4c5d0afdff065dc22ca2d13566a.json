{"ast":null,"code":"import LocationData from \"./locationdata\";\nexport default class Location {\n  /**\n   * \n   * @param {*} name \n   * @param {*} upNeighbour \n   * @param {*} downNeighbour \n   * @param {*} leftNeighbour \n   * @param {*} rightNeighbour \n   * @param {*} juice \n   * @param {*} photo \n   * @param {*} video \n   */\n  constructor(name, upNeighbour, downNeighbour, leftNeighbour, rightNeighbour, juice, photo, video) {\n    this.name = name; // A location is aware of its four neighbours (for now)\n\n    this.upNeighbour = upNeighbour;\n    this.downNeighbour = downNeighbour;\n    this.leftNeighbour = leftNeighbour;\n    this.rightNeighbour = rightNeighbour; // Special attributes to the location\n\n    this.juice = juice;\n    this.photo = juice;\n    this.video = juice;\n  }\n  /**\n   * Returns boolean if a neighbour exists after executing a move\n   * @param {*} direction \n   */\n\n\n  move(direction) {\n    switch (direction) {\n      case \"up\":\n        return this.upNeighbour;\n\n      case \"down\":\n        return this.downNeighbour;\n\n      case \"left\":\n        return this.leftNeighbour;\n\n      case \"right\":\n        return this.rightNeighbour;\n\n      default:\n        throw \"error, invalid direction\";\n    }\n  }\n\n  getStartPoint() {\n    return LocationData.Entrance;\n  }\n\n}","map":{"version":3,"sources":["/Users/bobby/Repositories/vtour/VTour-1/src/blogic/Location.js"],"names":["LocationData","Location","constructor","name","upNeighbour","downNeighbour","leftNeighbour","rightNeighbour","juice","photo","video","move","direction","getStartPoint","Entrance"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,gBAAzB;AAEA,eAAe,MAAMC,QAAN,CAAe;AAC1B;;;;;;;;;;;AAWAC,EAAAA,WAAW,CAACC,IAAD,EAAMC,WAAN,EAAkBC,aAAlB,EAAgCC,aAAhC,EAA8CC,cAA9C,EACPC,KADO,EACDC,KADC,EACKC,KADL,EACW;AAClB,SAAKP,IAAL,GAAYA,IAAZ,CADkB,CAGlB;;AACA,SAAKC,WAAL,GAAmBA,WAAnB;AACA,SAAKC,aAAL,GAAqBA,aAArB;AACA,SAAKC,aAAL,GAAqBA,aAArB;AACA,SAAKC,cAAL,GAAsBA,cAAtB,CAPkB,CASlB;;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA,SAAKC,KAAL,GAAaD,KAAb;AACA,SAAKE,KAAL,GAAaF,KAAb;AACH;AAED;;;;;;AAIAG,EAAAA,IAAI,CAAEC,SAAF,EAAa;AACb,YAAOA,SAAP;AACI,WAAK,IAAL;AACI,eAAO,KAAKR,WAAZ;;AACJ,WAAK,MAAL;AACI,eAAO,KAAKC,aAAZ;;AACJ,WAAK,MAAL;AACI,eAAO,KAAKC,aAAZ;;AACJ,WAAK,OAAL;AACI,eAAO,KAAKC,cAAZ;;AACJ;AACI,cAAO,0BAAP;AAVR;AAYH;;AAEDM,EAAAA,aAAa,GAAE;AACX,WAAOb,YAAY,CAACc,QAApB;AACH;;AAjDyB","sourcesContent":["import LocationData from \"./locationdata\"\n\nexport default class Location {\n    /**\n     * \n     * @param {*} name \n     * @param {*} upNeighbour \n     * @param {*} downNeighbour \n     * @param {*} leftNeighbour \n     * @param {*} rightNeighbour \n     * @param {*} juice \n     * @param {*} photo \n     * @param {*} video \n     */\n    constructor(name,upNeighbour,downNeighbour,leftNeighbour,rightNeighbour,\n        juice,photo,video){\n        this.name = name;\n\n        // A location is aware of its four neighbours (for now)\n        this.upNeighbour = upNeighbour;\n        this.downNeighbour = downNeighbour;\n        this.leftNeighbour = leftNeighbour;\n        this.rightNeighbour = rightNeighbour;\n\n        // Special attributes to the location\n        this.juice = juice;\n        this.photo = juice;\n        this.video = juice;\n    }\n\n    /**\n     * Returns boolean if a neighbour exists after executing a move\n     * @param {*} direction \n     */\n    move (direction) {\n        switch(direction){\n            case \"up\":\n                return this.upNeighbour \n            case \"down\":\n                return this.downNeighbour\n            case \"left\":\n                return this.leftNeighbour \n            case \"right\":\n                return this.rightNeighbour \n            default:\n                throw (\"error, invalid direction\");    \n        }\n    }\n\n    getStartPoint(){\n        return LocationData.Entrance\n    }\n}"]},"metadata":{},"sourceType":"module"}