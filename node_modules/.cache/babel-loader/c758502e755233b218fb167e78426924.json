{"ast":null,"code":"import AllLocations from \"./locationdata\";\nimport Location from \"./Location\";\nexport default class Map {\n  constructor() {\n    // init empty array\n    this.locationArray = [];\n    this.currentLocation = \"\";\n\n    for (var key in AllLocations) {\n      if (AllLocations.hasOwnProperty(key)) {\n        // construct location object\n        let newLocation = new Location(AllLocations[key]); // bind Entrance to newLocation\n\n        if (newLocation.name == \"Entrance\") {\n          this.currentLocation = newLocation;\n        }\n\n        this.locationArray.push(newLocation);\n      }\n    }\n\n    this.move(\"up\");\n    console.log(this.currentLocation.name);\n  }\n\n  getCurrentLocation() {\n    console.log(\"The current location is \" + this.currentLocation);\n    return this.currentLocation;\n  }\n\n  getAllLocations() {\n    return this.locationArray;\n  }\n\n  move(direction) {\n    // find if there is neighbour\n    let newLocationName = this.currentLocation.getNeighbourName(direction); // \n\n    this.currentLocation = search(newLocationName, this.locationArray); //this.locationArray.find(newLocationName);\n  }\n\n}","map":{"version":3,"sources":["/Users/bobby/Repositories/vtour/VTour-1/src/blogic/Map.js"],"names":["AllLocations","Location","Map","constructor","locationArray","currentLocation","key","hasOwnProperty","newLocation","name","push","move","console","log","getCurrentLocation","getAllLocations","direction","newLocationName","getNeighbourName","search"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,gBAAzB;AACA,OAAOC,QAAP,MAAqB,YAArB;AAEA,eAAe,MAAMC,GAAN,CAAU;AACrBC,EAAAA,WAAW,GAAE;AACT;AACA,SAAKC,aAAL,GAAqB,EAArB;AACA,SAAKC,eAAL,GAAuB,EAAvB;;AACA,SAAK,IAAIC,GAAT,IAAgBN,YAAhB,EAA6B;AAEzB,UAAIA,YAAY,CAACO,cAAb,CAA4BD,GAA5B,CAAJ,EAAqC;AAEjC;AACA,YAAIE,WAAW,GAAG,IAAIP,QAAJ,CAAaD,YAAY,CAACM,GAAD,CAAzB,CAAlB,CAHiC,CAKjC;;AACA,YAAIE,WAAW,CAACC,IAAZ,IAAoB,UAAxB,EAAmC;AAC/B,eAAKJ,eAAL,GAAuBG,WAAvB;AACH;;AAED,aAAKJ,aAAL,CAAmBM,IAAnB,CAAwBF,WAAxB;AACH;AACJ;;AAED,SAAKG,IAAL,CAAU,IAAV;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKR,eAAL,CAAqBI,IAAjC;AACH;;AAEDK,EAAAA,kBAAkB,GAAE;AAChBF,IAAAA,OAAO,CAACC,GAAR,CAAY,6BAA6B,KAAKR,eAA9C;AACA,WAAO,KAAKA,eAAZ;AACH;;AAEDU,EAAAA,eAAe,GAAE;AACb,WAAO,KAAKX,aAAZ;AACH;;AAEDO,EAAAA,IAAI,CAACK,SAAD,EAAW;AACX;AACA,QAAIC,eAAe,GAAG,KAAKZ,eAAL,CAAqBa,gBAArB,CAAsCF,SAAtC,CAAtB,CAFW,CAIX;;AACA,SAAKX,eAAL,GAAuBc,MAAM,CAACF,eAAD,EAAkB,KAAKb,aAAvB,CAA7B,CALW,CAMX;AACH;;AAzCoB","sourcesContent":["import AllLocations from \"./locationdata\"\nimport Location from \"./Location\"\n\nexport default class Map {\n    constructor(){\n        // init empty array\n        this.locationArray = [];\n        this.currentLocation = \"\";\n        for( var key in AllLocations){\n\n            if (AllLocations.hasOwnProperty(key)){\n\n                // construct location object\n                let newLocation = new Location(AllLocations[key])\n\n                // bind Entrance to newLocation\n                if (newLocation.name == \"Entrance\"){\n                    this.currentLocation = newLocation;\n                }\n\n                this.locationArray.push(newLocation);\n            }\n        }\n\n        this.move(\"up\")\n        console.log(this.currentLocation.name)\n    }\n\n    getCurrentLocation(){\n        console.log(\"The current location is \" + this.currentLocation)\n        return this.currentLocation;\n    }\n\n    getAllLocations(){\n        return this.locationArray\n    }\n\n    move(direction){\n        // find if there is neighbour\n        let newLocationName = this.currentLocation.getNeighbourName(direction);\n\n        // \n        this.currentLocation = search(newLocationName, this.locationArray)\n        //this.locationArray.find(newLocationName);\n    }\n\n}"]},"metadata":{},"sourceType":"module"}